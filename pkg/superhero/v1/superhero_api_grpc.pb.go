// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: superhero/v1/superhero_api.proto

package superherov1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SuperheroApiClient is the client API for SuperheroApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SuperheroApiClient interface {
	Crear(ctx context.Context, in *Superhero, opts ...grpc.CallOption) (*Result, error)
	Actulizar(ctx context.Context, in *Superhero, opts ...grpc.CallOption) (*Result, error)
	
	Lista(ctx context.Context, in *Pagina, opts ...grpc.CallOption) (*ListaSuperhero, error)
}

type superheroApiClient struct {
	cc grpc.ClientConnInterface
}

func NewSuperheroApiClient(cc grpc.ClientConnInterface) SuperheroApiClient {
	return &superheroApiClient{cc}
}

func (c *superheroApiClient) Crear(ctx context.Context, in *Superhero, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/superhero.v1.SuperheroApi/Crear", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *superheroApiClient) Actulizar(ctx context.Context, in *Superhero, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/superhero.v1.SuperheroApi/Actulizar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *superheroApiClient) Lista(ctx context.Context, in *Pagina, opts ...grpc.CallOption) (*ListaSuperhero, error) {
	out := new(ListaSuperhero)
	err := c.cc.Invoke(ctx, "/superhero.v1.SuperheroApi/Lista", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SuperheroApiServer is the server API for SuperheroApi service.
// All implementations must embed UnimplementedSuperheroApiServer
// for forward compatibility
type SuperheroApiServer interface {
	Crear(context.Context, *Superhero) (*Result, error)
	Actulizar(context.Context, *Superhero) (*Result, error)
	Lista(context.Context, *Pagina) (*ListaSuperhero, error)
	mustEmbedUnimplementedSuperheroApiServer()
}

// UnimplementedSuperheroApiServer must be embedded to have forward compatible implementations.
type UnimplementedSuperheroApiServer struct {
}

func (UnimplementedSuperheroApiServer) Crear(context.Context, *Superhero) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Crear not implemented")
}
func (UnimplementedSuperheroApiServer) Actulizar(context.Context, *Superhero) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Actulizar not implemented")
}
func (UnimplementedSuperheroApiServer) Lista(context.Context, *Pagina) (*ListaSuperhero, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Lista not implemented")
}
func (UnimplementedSuperheroApiServer) mustEmbedUnimplementedSuperheroApiServer() {}

// UnsafeSuperheroApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SuperheroApiServer will
// result in compilation errors.
type UnsafeSuperheroApiServer interface {
	mustEmbedUnimplementedSuperheroApiServer()
}

func RegisterSuperheroApiServer(s grpc.ServiceRegistrar, srv SuperheroApiServer) {
	s.RegisterService(&SuperheroApi_ServiceDesc, srv)
}

func _SuperheroApi_Crear_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Superhero)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuperheroApiServer).Crear(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/superhero.v1.SuperheroApi/Crear",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuperheroApiServer).Crear(ctx, req.(*Superhero))
	}
	return interceptor(ctx, in, info, handler)
}

func _SuperheroApi_Actulizar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Superhero)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuperheroApiServer).Actulizar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/superhero.v1.SuperheroApi/Actulizar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuperheroApiServer).Actulizar(ctx, req.(*Superhero))
	}
	return interceptor(ctx, in, info, handler)
}

func _SuperheroApi_Lista_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Pagina)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuperheroApiServer).Lista(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/superhero.v1.SuperheroApi/Lista",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuperheroApiServer).Lista(ctx, req.(*Pagina))
	}
	return interceptor(ctx, in, info, handler)
}

// SuperheroApi_ServiceDesc is the grpc.ServiceDesc for SuperheroApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SuperheroApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "superhero.v1.SuperheroApi",
	HandlerType: (*SuperheroApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Crear",
			Handler:    _SuperheroApi_Crear_Handler,
		},
		{
			MethodName: "Actulizar",
			Handler:    _SuperheroApi_Actulizar_Handler,
		},
		{
			MethodName: "Lista",
			Handler:    _SuperheroApi_Lista_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "superhero/v1/superhero_api.proto",
}
